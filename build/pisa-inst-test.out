
 Test Suite: pisa-inst
  + Test Case 1: asm functions: basic instructions
     [ passed ]t1_unpack_opcode, expected = 10, actual = 10
     [ passed ]t1_unpack_rs, expected = 00, actual = 00
     [ passed ]t1_unpack_rt, expected = 03, actual = 03
     [ passed ]t1_unpack_rd, expected = 02, actual = 02
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 00, actual = 00
     [ passed ]t1_unpack_opcode, expected = 10, actual = 10
     [ passed ]t1_unpack_rs, expected = 04, actual = 04
     [ passed ]t1_unpack_rt, expected = 03, actual = 03
     [ passed ]t1_unpack_rd, expected = 02, actual = 02
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 00, actual = 00
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 00, actual = 00
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_imm, expected = 0000, actual = 0000
  + Test Case 2: asm functions: reg-reg instructions
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 21, actual = 21
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 23, actual = 23
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 24, actual = 24
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 25, actual = 25
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 26, actual = 26
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 27, actual = 27
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 2a, actual = 2a
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 2b, actual = 2b
  + Test Case 3: asm functions: reg-imm instructions
     [ passed ]t1_unpack_opcode, expected = 09, actual = 09
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 0c, actual = 0c
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 0d, actual = 0d
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 0e, actual = 0e
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 0a, actual = 0a
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 0b, actual = 0b
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
  + Test Case 4: asm functions: shift instructions
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 00, actual = 00
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 03, actual = 03
     [ passed ]t1_unpack_func, expected = 00, actual = 00
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 00, actual = 00
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 03, actual = 03
     [ passed ]t1_unpack_func, expected = 02, actual = 02
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 00, actual = 00
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 03, actual = 03
     [ passed ]t1_unpack_func, expected = 03, actual = 03
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 04, actual = 04
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 06, actual = 06
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 07, actual = 07
  + Test Case 5: asm functions: other instructions
     [ passed ]t1_unpack_opcode, expected = 0f, actual = 0f
     [ passed ]t1_unpack_rs, expected = 00, actual = 00
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
  + Test Case 6: asm functions: multiply/divide instructions
     [ passed ]t1_unpack_opcode, expected = 1c, actual = 1c
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 02, actual = 02
     [ passed ]t1_unpack_opcode, expected = 27, actual = 27
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 05, actual = 05
     [ passed ]t1_unpack_opcode, expected = 27, actual = 27
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 07, actual = 07
     [ passed ]t1_unpack_opcode, expected = 27, actual = 27
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 06, actual = 06
     [ passed ]t1_unpack_opcode, expected = 27, actual = 27
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 08, actual = 08
  + Test Case 7: asm functions: load instructions
     [ passed ]t1_unpack_opcode, expected = 23, actual = 23
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 21, actual = 21
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 25, actual = 25
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 20, actual = 20
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 24, actual = 24
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
  + Test Case 8: asm functions: store instructions
     [ passed ]t1_unpack_opcode, expected = 2b, actual = 2b
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 29, actual = 29
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 28, actual = 28
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
  + Test Case 9: asm functions: unconditional jump instructinos
     [ passed ]t1_unpack_opcode, expected = 02, actual = 02
     [ passed ]t1_unpack_target, expected = 3deadbe, actual = 3deadbe
     [ passed ]t1_unpack_opcode, expected = 03, actual = 03
     [ passed ]t1_unpack_target, expected = 3deadbe, actual = 3deadbe
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_rd, expected = 00, actual = 00
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 08, actual = 08
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 09, actual = 09
  + Test Case 10: asm functions: conditional branch instructions
     [ passed ]t1_unpack_opcode, expected = 04, actual = 04
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 05, actual = 05
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 07, actual = 07
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 06, actual = 06
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 07, actual = 07
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 01, actual = 01
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
     [ passed ]t1_unpack_opcode, expected = 01, actual = 01
     [ passed ]t1_unpack_rs, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rt, expected = 01, actual = 01
     [ passed ]t1_unpack_imm, expected = abcd, actual = abcd
  + Test Case 11: asm functions: system-level instructions
     [ passed ]t1_unpack_opcode, expected = 00, actual = 00
     [ passed ]t1_unpack_rs, expected = 00, actual = 00
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_rd, expected = 00, actual = 00
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 0c, actual = 0c
     [ passed ]t1_unpack_opcode, expected = 10, actual = 10
     [ passed ]t1_unpack_rs, expected = 10, actual = 10
     [ passed ]t1_unpack_rt, expected = 00, actual = 00
     [ passed ]t1_unpack_rd, expected = 00, actual = 00
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 18, actual = 18
  + Test Case 12: asm functions: atomic memory operations
     [ passed ]t1_unpack_opcode, expected = 27, actual = 27
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 02, actual = 02
     [ passed ]t1_unpack_opcode, expected = 27, actual = 27
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 03, actual = 03
     [ passed ]t1_unpack_opcode, expected = 27, actual = 27
     [ passed ]t1_unpack_rs, expected = 07, actual = 07
     [ passed ]t1_unpack_rt, expected = 1d, actual = 1d
     [ passed ]t1_unpack_rd, expected = 0d, actual = 0d
     [ passed ]t1_unpack_shamt, expected = 00, actual = 00
     [ passed ]t1_unpack_func, expected = 04, actual = 04
  + Test Case 13: asm strings: basic instructions
     [ passed ]t2_inst_asm_str, expected = 40031000, actual = 40031000
     [ passed ]t2_inst_asm_str, expected = 40831000, actual = 40831000
     [ passed ]t2_inst_asm_str, expected = 00000000, actual = 00000000
  + Test Case 14: asm strings: reg-reg instructions
     [ passed ]t2_inst_asm_str, expected = 00fd6821, actual = 00fd6821
     [ passed ]t2_inst_asm_str, expected = 00fd6823, actual = 00fd6823
     [ passed ]t2_inst_asm_str, expected = 00fd6824, actual = 00fd6824
     [ passed ]t2_inst_asm_str, expected = 00fd6825, actual = 00fd6825
     [ passed ]t2_inst_asm_str, expected = 00fd6826, actual = 00fd6826
     [ passed ]t2_inst_asm_str, expected = 00fd6827, actual = 00fd6827
     [ passed ]t2_inst_asm_str, expected = 00fd682a, actual = 00fd682a
     [ passed ]t2_inst_asm_str, expected = 00fd682b, actual = 00fd682b
  + Test Case 15: asm strings: reg-imm instructions
     [ passed ]t2_inst_asm_str, expected = 27a7abcd, actual = 27a7abcd
     [ passed ]t2_inst_asm_str, expected = 33a7abcd, actual = 33a7abcd
     [ passed ]t2_inst_asm_str, expected = 37a7abcd, actual = 37a7abcd
     [ passed ]t2_inst_asm_str, expected = 3ba7abcd, actual = 3ba7abcd
     [ passed ]t2_inst_asm_str, expected = 2ba7abcd, actual = 2ba7abcd
     [ passed ]t2_inst_asm_str, expected = 2fa7abcd, actual = 2fa7abcd
  + Test Case 16: asm functions: shift instructions
     [ passed ]t2_inst_asm_str, expected = 000768c0, actual = 000768c0
     [ passed ]t2_inst_asm_str, expected = 000768c2, actual = 000768c2
     [ passed ]t2_inst_asm_str, expected = 000768c3, actual = 000768c3
     [ passed ]t2_inst_asm_str, expected = 03a76804, actual = 03a76804
     [ passed ]t2_inst_asm_str, expected = 03a76806, actual = 03a76806
     [ passed ]t2_inst_asm_str, expected = 03a76807, actual = 03a76807
  + Test Case 17: asm functions: other instructions
     [ passed ]t2_inst_asm_str, expected = 3c07abcd, actual = 3c07abcd
  + Test Case 18: asm functions: multiply/divide instructions
     [ passed ]t2_inst_asm_str, expected = 73a76802, actual = 73a76802
     [ passed ]t2_inst_asm_str, expected = 9fa76805, actual = 9fa76805
     [ passed ]t2_inst_asm_str, expected = 9fa76807, actual = 9fa76807
     [ passed ]t2_inst_asm_str, expected = 9fa76806, actual = 9fa76806
     [ passed ]t2_inst_asm_str, expected = 9fa76808, actual = 9fa76808
  + Test Case 19: asm functions: load instructions
     [ passed ]t2_inst_asm_str, expected = 8fa7abcd, actual = 8fa7abcd
     [ passed ]t2_inst_asm_str, expected = 87a7abcd, actual = 87a7abcd
     [ passed ]t2_inst_asm_str, expected = 97a70000, actual = 97a70000
     [ passed ]t2_inst_asm_str, expected = 83a70004, actual = 83a70004
     [ passed ]t2_inst_asm_str, expected = 93a70008, actual = 93a70008
  + Test Case 20: asm functions: store instructions
     [ passed ]t2_inst_asm_str, expected = afa7abcd, actual = afa7abcd
     [ passed ]t2_inst_asm_str, expected = a7a70004, actual = a7a70004
     [ passed ]t2_inst_asm_str, expected = a3a70008, actual = a3a70008
  + Test Case 21: asm functions: unconditional jump instructinos
     [ passed ]t2_inst_asm_str, expected = 0bdeadbe, actual = 0bdeadbe
     [ passed ]t2_inst_asm_str, expected = 08000404, actual = 08000404
     [ passed ]t2_inst_asm_str, expected = 08000403, actual = 08000403
     [ passed ]t2_inst_asm_str, expected = 080003fd, actual = 080003fd
     [ passed ]t2_inst_asm_str, expected = 0c0034d6, actual = 0c0034d6
     [ passed ]t2_inst_asm_str, expected = 03a00008, actual = 03a00008
     [ passed ]t2_inst_asm_str, expected = 03a06809, actual = 03a06809
  + Test Case 22: asm functions: conditional branch instructions
     [ passed ]t2_inst_asm_str, expected = 13a7abcd, actual = 13a7abcd
     [ passed ]t2_inst_asm_str, expected = 13a70003, actual = 13a70003
     [ passed ]t2_inst_asm_str, expected = 13a7fc3f, actual = 13a7fc3f
     [ passed ]t2_inst_asm_str, expected = 13a70002, actual = 13a70002
     [ passed ]t2_inst_asm_str, expected = 13a7fffc, actual = 13a7fffc
     [ passed ]t2_inst_asm_str, expected = 17a7abcd, actual = 17a7abcd
     [ passed ]t2_inst_asm_str, expected = 1ba0abcd, actual = 1ba0abcd
     [ passed ]t2_inst_asm_str, expected = 1fa0abcd, actual = 1fa0abcd
     [ passed ]t2_inst_asm_str, expected = 07a0abcd, actual = 07a0abcd
     [ passed ]t2_inst_asm_str, expected = 07a1abcd, actual = 07a1abcd
  + Test Case 23: asm functions: system-level instructions
     [ passed ]t2_inst_asm_str, expected = 0000000c, actual = 0000000c
     [ passed ]t2_inst_asm_str, expected = 42000018, actual = 42000018
  + Test Case 24: asm strings: atomic memory operations
     [ passed ]t2_inst_asm_str, expected = 9cfd6802, actual = 9cfd6802
     [ passed ]t2_inst_asm_str, expected = 9cfd6803, actual = 9cfd6803
     [ passed ]t2_inst_asm_str, expected = 9cfd6804, actual = 9cfd6804

